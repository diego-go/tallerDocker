'use strict';

exports.__esModule = true;
exports.isBuiltIn = isBuiltIn;
exports.default = resolveImportType;

var _lodash = require('lodash.cond');

var _lodash2 = _interopRequireDefault(_lodash);

var _builtinModules = require('builtin-modules');

var _builtinModules2 = _interopRequireDefault(_builtinModules);

var _path = require('path');

var _resolve = require('./resolve');

var _resolve2 = _interopRequireDefault(_resolve);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function constant(value) {
  return function () {
    return value;
  };
}

function isBuiltIn(name, settings) {
  var extras = settings && settings['import/core-modules'] || [];
  return _builtinModules2.default.indexOf(name) !== -1 || extras.indexOf(name) > -1;
}

var externalModuleRegExp = /^\w/;
function isExternalModule(name, settings, path) {
  if (!externalModuleRegExp.test(name)) return false;
  return !path || -1 < path.indexOf((0, _path.join)('node_modules', name));
}

var scopedRegExp = /^@\w+\/\w+/;
function isScoped(name) {
  return scopedRegExp.test(name);
}

function isInternalModule(name, settings, path) {
  if (!externalModuleRegExp.test(name)) return false;
  return path && -1 === path.indexOf((0, _path.join)('node_modules', name));
}

function isRelativeToParent(name) {
  return name.indexOf('../') === 0;
}

var indexFiles = ['.', './', './index', './index.js'];
function isIndex(name) {
  return indexFiles.indexOf(name) !== -1;
}

function isRelativeToSibling(name) {
  return name.indexOf('./') === 0;
}

var typeTest = (0, _lodash2.default)([[isBuiltIn, constant('builtin')], [isExternalModule, constant('external')], [isScoped, constant('external')], [isInternalModule, constant('internal')], [isRelativeToParent, constant('parent')], [isIndex, constant('index')], [isRelativeToSibling, constant('sibling')], [constant(true), constant('unknown')]]);

function resolveImportType(name, context) {
  return typeTest(name, context.settings, (0, _resolve2.default)(name, context));
}
//# sourceMappingURL=data:application/json;base64,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VHlwZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25kIGZyb20gJ2xvZGFzaC5jb25kJ1xuaW1wb3J0IGJ1aWx0aW5Nb2R1bGVzIGZyb20gJ2J1aWx0aW4tbW9kdWxlcydcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJ1xuXG5pbXBvcnQgcmVzb2x2ZSBmcm9tICcuL3Jlc29sdmUnXG5cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiAoKSA9PiB2YWx1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCdWlsdEluKG5hbWUsIHNldHRpbmdzKSB7XG4gIGNvbnN0IGV4dHJhcyA9IChzZXR0aW5ncyAmJiBzZXR0aW5nc1snaW1wb3J0L2NvcmUtbW9kdWxlcyddKSB8fCBbXVxuICByZXR1cm4gYnVpbHRpbk1vZHVsZXMuaW5kZXhPZihuYW1lKSAhPT0gLTEgfHwgZXh0cmFzLmluZGV4T2YobmFtZSkgPiAtMVxufVxuXG5jb25zdCBleHRlcm5hbE1vZHVsZVJlZ0V4cCA9IC9eXFx3L1xuZnVuY3Rpb24gaXNFeHRlcm5hbE1vZHVsZShuYW1lLCBzZXR0aW5ncywgcGF0aCkge1xuICBpZiAoIWV4dGVybmFsTW9kdWxlUmVnRXhwLnRlc3QobmFtZSkpIHJldHVybiBmYWxzZVxuICByZXR1cm4gKCFwYXRoIHx8IC0xIDwgcGF0aC5pbmRleE9mKGpvaW4oJ25vZGVfbW9kdWxlcycsIG5hbWUpKSlcbn1cblxuY29uc3Qgc2NvcGVkUmVnRXhwID0gL15AXFx3K1xcL1xcdysvXG5mdW5jdGlvbiBpc1Njb3BlZChuYW1lKSB7XG4gIHJldHVybiBzY29wZWRSZWdFeHAudGVzdChuYW1lKVxufVxuXG5mdW5jdGlvbiBpc0ludGVybmFsTW9kdWxlKG5hbWUsIHNldHRpbmdzLCBwYXRoKSB7XG4gIGlmICghZXh0ZXJuYWxNb2R1bGVSZWdFeHAudGVzdChuYW1lKSkgcmV0dXJuIGZhbHNlXG4gIHJldHVybiAocGF0aCAmJiAtMSA9PT0gcGF0aC5pbmRleE9mKGpvaW4oJ25vZGVfbW9kdWxlcycsIG5hbWUpKSlcbn1cblxuZnVuY3Rpb24gaXNSZWxhdGl2ZVRvUGFyZW50KG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuaW5kZXhPZignLi4vJykgPT09IDBcbn1cblxuY29uc3QgaW5kZXhGaWxlcyA9IFsnLicsICcuLycsICcuL2luZGV4JywgJy4vaW5kZXguanMnXVxuZnVuY3Rpb24gaXNJbmRleChuYW1lKSB7XG4gIHJldHVybiBpbmRleEZpbGVzLmluZGV4T2YobmFtZSkgIT09IC0xXG59XG5cbmZ1bmN0aW9uIGlzUmVsYXRpdmVUb1NpYmxpbmcobmFtZSkge1xuICByZXR1cm4gbmFtZS5pbmRleE9mKCcuLycpID09PSAwXG59XG5cbmNvbnN0IHR5cGVUZXN0ID0gY29uZChbXG4gIFtpc0J1aWx0SW4sIGNvbnN0YW50KCdidWlsdGluJyldLFxuICBbaXNFeHRlcm5hbE1vZHVsZSwgY29uc3RhbnQoJ2V4dGVybmFsJyldLFxuICBbaXNTY29wZWQsIGNvbnN0YW50KCdleHRlcm5hbCcpXSxcbiAgW2lzSW50ZXJuYWxNb2R1bGUsIGNvbnN0YW50KCdpbnRlcm5hbCcpXSxcbiAgW2lzUmVsYXRpdmVUb1BhcmVudCwgY29uc3RhbnQoJ3BhcmVudCcpXSxcbiAgW2lzSW5kZXgsIGNvbnN0YW50KCdpbmRleCcpXSxcbiAgW2lzUmVsYXRpdmVUb1NpYmxpbmcsIGNvbnN0YW50KCdzaWJsaW5nJyldLFxuICBbY29uc3RhbnQodHJ1ZSksIGNvbnN0YW50KCd1bmtub3duJyldLFxuXSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZUltcG9ydFR5cGUobmFtZSwgY29udGV4dCkge1xuICByZXR1cm4gdHlwZVRlc3QobmFtZSwgY29udGV4dC5zZXR0aW5ncywgcmVzb2x2ZShuYW1lLCBjb250ZXh0KSlcbn1cbiJdfQ==